resource "aws_elb" "elb" {
  name     = "opentest-${var.environment}"
  internal = "true"

  subnets = ["${var.vpc_subnet_private_ids}"]

  listener {
    instance_port     = "80"
    instance_protocol = "HTTP"
    lb_port           = "80"
    lb_protocol       = "HTTP"
  }

  listener {
    instance_port     = "81"
    instance_protocol = "HTTP"
    lb_port           = "81"
    lb_protocol       = "HTTP"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 3
    timeout             = 8
    target              = "TCP:80"
    interval            = 10
  }

  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400

  security_groups = [
    "${aws_security_group.elb-sg.id}",
  ]

  tags {
    Name        = "opentest-${var.environment}"
    Environment = "${var.environment}"
    Service     = "opentest"
  }
}

resource "aws_autoscaling_group" "asg" {
  lifecycle {
    create_before_destroy = true
  }

  availability_zones = ["${data.aws_availability_zones.azs.zone_ids}"]

  name_prefix          = "opentest-${var.environment}-"
  max_size             = "1"
  min_size             = "1"
  desired_capacity     = "1"
  force_delete         = true
  launch_configuration = "${aws_launch_configuration.asg-lc.name}"

  load_balancers = ["${aws_elb.elb.name}"]

  vpc_zone_identifier = ["${var.vpc_subnet_private_ids}"]

  health_check_grace_period = 300
  health_check_type         = "EC2"

  tag {
    key                 = "Name"
    value               = "opentest-${var.environment}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Environment"
    value               = "${var.environment}"
    propagate_at_launch = "true"
  }

  tag {
    key                 = "Service"
    value               = "opentest"
    propagate_at_launch = "true"
  }
}

data "template_file" "userdata" {
  template = "${file("${path.module}/userdata.tpl")}"

  vars {
    OPENTEST_ASSETS_BUCKET = "${var.opentest-assets-bucket}"
    OPENTEST_ENDPOINT      = "${aws_elb.elb.dns_name}"
  }
}

resource "aws_launch_configuration" "asg-lc" {
  lifecycle {
    create_before_destroy = true
  }

  name_prefix          = "opentest-${var.environment}-"
  image_id             = "${data.aws_ami.amazon-linux-2.id}"
  instance_type        = "t2.micro"
  security_groups      = ["${aws_security_group.ec2-sg.id}"]
  user_data            = "${data.template_file.userdata.rendered}"
  iam_instance_profile = "${aws_iam_instance_profile.ec2-profile.name}"
  key_name             = "${var.ssh_keypair_name}"
}

resource "aws_security_group" "ec2-sg" {
  name_prefix = "opentest-${var.environment}-ec2-"
  description = "opentest-${var.environment}-ec2 security group"
  vpc_id      = "${var.vpc_id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["${data.aws_vpc.vpc.cidr_block}"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["194.101.68.177/32"]
  }

  ingress {
    from_port   = "80"
    to_port     = "80"
    protocol    = "tcp"
    cidr_blocks = ["${data.aws_vpc.vpc.cidr_block}"]
  }

  ingress {
    from_port   = "81"
    to_port     = "81"
    protocol    = "tcp"
    cidr_blocks = ["${data.aws_vpc.vpc.cidr_block}"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name        = "opentest-${var.environment}-ec2"
    Service     = "opentest"
    Environment = "${var.environment}"
  }
}

resource "aws_security_group" "elb-sg" {
  name_prefix = "opentest-${var.environment}-elb-"
  description = "opentest-${var.environment}-elb elb security group"
  vpc_id      = "${var.vpc_id}"

  ingress {
    from_port   = "80"
    to_port     = "80"
    protocol    = "tcp"
    cidr_blocks = ["${data.aws_vpc.vpc.cidr_block}"]
  }

  ingress {
    from_port   = "81"
    to_port     = "81"
    protocol    = "tcp"
    cidr_blocks = ["${data.aws_vpc.vpc.cidr_block}"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name        = "opentest-${var.environment}-elb"
    Service     = "opentest"
    Environment = "${var.environment}"
  }
}
