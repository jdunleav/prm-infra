resource "aws_autoscaling_lifecycle_hook" "opentest_hook" {
  count = "${length(data.aws_availability_zones.azs.names)}"

  name                   = "${var.environment}-opentest-hook-${element(data.aws_availability_zones.azs.names, count.index)}"
  autoscaling_group_name = "${element(aws_autoscaling_group.asg.*.name, count.index)}"
  default_result         = "CONTINUE"
  heartbeat_timeout      = 60
  lifecycle_transition   = "autoscaling:EC2_INSTANCE_LAUNCHING"
}

resource "aws_iam_role" "opentest_hook" {
  name = "${var.environment}-opentest-hook"

  assume_role_policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
                "Service": "lambda.amazonaws.com"
            },
            "Effect": "Allow"            
        }
    ]
}
EOF
}

resource "aws_iam_role_policy" "opentest_hook" {
  name = "${var.environment}-opentest-hook"
  role = "${aws_iam_role.opentest_hook.id}"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ec2:ModifyInstanceAttribute",
                "autoscaling:CompleteLifecycleAction"
            ],
            "Effect": "Allow",
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "opentest_hook" {
  role       = "${aws_iam_role.opentest_hook.id}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}

locals {
  event_pattern = {
    source      = ["aws.autoscaling"]
    detail-type = ["EC2 Instance-launch Lifecycle Action"]

    detail = {
      AutoScalingGroupName = ["${aws_autoscaling_group.asg.*.name}"]
    }
  }

  event_pattern_json = "${jsonencode(local.event_pattern)}"
}

resource "aws_cloudwatch_event_rule" "opentest_hook" {
  name        = "${var.environment}-opentest-hook"
  description = "Update OpenTest VPN Gateway instance when new instance launched"

  event_pattern = "${local.event_pattern_json}"
}

resource "aws_lambda_permission" "opentest_hook" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.opentest_hook.function_name}"
  principal     = "events.amazonaws.com"
  source_arn    = "${aws_cloudwatch_event_rule.opentest_hook.arn}"
}

resource "aws_cloudwatch_event_target" "opentest_hook" {
  target_id = "${var.environment}-opentest-hook"
  rule      = "${aws_cloudwatch_event_rule.opentest_hook.name}"
  arn       = "${aws_lambda_function.opentest_hook.arn}"
}

module "package" {
  source = "howdio/lambda/aws//modules/package"

  name = "opentest-hook"
  path = "${path.module}/lambda_function.py"
}

resource "aws_lambda_function" "opentest_hook" {
  filename         = "${module.package.path}"
  function_name    = "${var.environment}-opentest-hook"
  handler          = "lambda_function.lambda_handler"
  role             = "${aws_iam_role.opentest_hook.arn}"
  description      = "OpenTest VPN Gateway Instance mangler"
  memory_size      = 128
  timeout          = 20
  runtime          = "python3.7"
  source_code_hash = "${module.package.base64sha256}"

  vpc_config {
    subnet_ids = ["${split(",", var.vpc_subnet_private_ids)}"]
    security_group_ids = ["${aws_security_group.opentest_hook.id}"]
  }

  tags {
    Name          = "${var.environment}-opentest-hook"
    Enviroronment = "${var.environment}"
    Component     = "opentest"
  }
}

resource "aws_security_group" "opentest_hook" {
  name_prefix = "${var.environment}-opentest-hook"
  description = "${var.environment}-opentest-hook security group"
  vpc_id      = "${var.vpc_id}"

  tags {
    Name        = "${var.environment}-opentest-hook"
    Component   = "opentest"
    Environment = "${var.environment}"
  }

  egress {
      from_port = 0
      to_port   = 0
      protocol  = -1
      cidr_blocks = ["0.0.0.0/0"]
  }
}
